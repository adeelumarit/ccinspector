{"version":3,"file":"commands.js","mappings":"YAsDA,SAASA,EAAgBC,EAAYC,GACnC,GAAID,GAAcA,EAAWE,OAAS,EAAG,CACvC,IAAMC,EAAU,CACdC,KAAMC,OAAOC,aAAaC,4BAA4BC,qBACtDC,QAAS,gFACTC,KAAM,QACNC,YAAY,GAGRC,EAAiBX,EAAgB,UACvCI,OAAOQ,QAAQC,QAAQC,KAAKC,qBAAqBC,SAASL,EAAgBT,GAAS,SAAUe,GACvFA,EAAOC,SAAWd,OAAOe,kBAAkBC,OAC7CC,QAAQC,MAAM,wBAA0BL,EAAOK,MAAMd,SAErDa,QAAQE,IAAI,uCAEhB,GACF,CACF,CAnEAnB,OAAOoB,WAAa,SAAUC,GAAU,EAsExCrB,OAAOsB,QAAQC,UAAU,eAhEzB,SAAqBC,GACnB,IACEP,QAAQE,IAAI,wDAGZnB,OAAOQ,QAAQC,QAAQC,KAAKe,GAAGC,UAAS,SAAUb,GAC5CA,EAAOC,SAAWd,OAAOe,kBAAkBY,WAE7CjC,EADqBmB,EAAOe,MACE,KAElC,IAEA5B,OAAOQ,QAAQC,QAAQC,KAAKmB,GAAGH,UAAS,SAAUb,GAC5CA,EAAOC,SAAWd,OAAOe,kBAAkBY,WAE7CjC,EADqBmB,EAAOe,MACE,KAElC,IAEA5B,OAAOQ,QAAQC,QAAQC,KAAKoB,IAAIJ,UAAS,SAAUb,GAC7CA,EAAOC,SAAWd,OAAOe,kBAAkBY,WAE7CjC,EADsBmB,EAAOe,MACE,MAEnC,GACF,CAAE,MAAOV,GACPD,QAAQC,MAAM,sBAAwBA,EAAMd,SAG5C,IAAM2B,EAAe,CACnBhC,KAAMC,OAAOC,aAAaC,4BAA4B8B,aACtD5B,QAAS,sBAAwBc,EAAMd,QACvCC,KAAM,YACNC,YAAY,GAGdN,OAAOQ,QAAQC,QAAQC,KAAKC,qBAAqBC,SADrB,oBACmDmB,EACjF,CAAE,QACAP,EAAMS,WACR,CACF,G","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\nOffice.initialize = function (reason) { };\n\n/**\n * Handles the OnMessageRecipientsChanged event.\n * @param {*} event The Office event object\n */\nfunction CCInspector(event) {\n  try {\n    console.log(\"tagExternal_onMessageRecipientsChangedHandler method\"); // debugging\n\n    // Get recipients from the current email item\n    Office.context.mailbox.item.to.getAsync(function (result) {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n        const toRecipients = result.value;\n        checkRecipients(toRecipients, \"To\");\n      }\n    });\n\n    Office.context.mailbox.item.cc.getAsync(function (result) {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n        const ccRecipients = result.value;\n        checkRecipients(ccRecipients, \"CC\");\n      }\n    });\n\n    Office.context.mailbox.item.bcc.getAsync(function (result) {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n        const bccRecipients = result.value;\n        checkRecipients(bccRecipients, \"BCC\");\n      }\n    });\n  } catch (error) {\n    console.error(\"An error occurred: \" + error.message);\n\n    // Display an error notification\n    const errorDetails = {\n      type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\n      message: \"An error occurred: \" + error.message,\n      icon: \"iconError\",\n      persistent: true\n    };\n    const errorNotificationId = \"errorNotification\";\n    Office.context.mailbox.item.notificationMessages.addAsync(errorNotificationId, errorDetails);\n  } finally {\n    event.completed();\n  }\n}\n\n// Function to check recipients and display notifications\nfunction checkRecipients(recipients, recipientType) {\n  if (recipients && recipients.length > 1) {\n    const details = {\n      type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n      message: \"ACHTUNG: Sie verwenden mehr als einen Adressaten im CC-Feld. Sind Sie sicher?\",\n      icon: \"icon1\",\n      persistent: false\n    };\n\n    const notificationId = recipientType + \"Warning\";\n    Office.context.mailbox.item.notificationMessages.addAsync(notificationId, details, function (result) {\n      if (result.status === Office.AsyncResultStatus.Failed) {\n        console.error(\"Notification failed: \" + result.error.message);\n      } else {\n        console.log(\"Notification displayed successfully.\");\n      }\n    });\n  }\n}\n\n// Associate the event handler\nOffice.actions.associate(\"CCInspector\", CCInspector);\n\n\n\n"],"names":["checkRecipients","recipients","recipientType","length","details","type","Office","MailboxEnums","ItemNotificationMessageType","InformationalMessage","message","icon","persistent","notificationId","context","mailbox","item","notificationMessages","addAsync","result","status","AsyncResultStatus","Failed","console","error","log","initialize","reason","actions","associate","event","to","getAsync","Succeeded","value","cc","bcc","errorDetails","ErrorMessage","completed"],"sourceRoot":""}