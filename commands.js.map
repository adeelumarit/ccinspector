{"version":3,"file":"commands.js","mappings":"AAKAA,OAAOC,WAAa,SAAUC,GAAU,EAsExCF,OAAOG,QAAQC,UAAU,eAhEzB,SAAqBC,GACnB,IACEC,QAAQC,IAAI,wDAUZP,OAAOQ,QAAQC,QAAQC,KAAKC,GAAGC,UAAS,SAAUC,GAC5CA,EAAOC,SAAWd,OAAOe,kBAAkBC,WA8BrD,SAAyBC,GACvB,GAAIA,EAAWC,OAAS,EAAG,CACzB,IAAMC,EAAU,CACdC,KAAMpB,OAAOqB,aAAaC,4BAA4BC,aACtDC,QAAS,gFAETC,YAAY,GAIdzB,OAAOQ,QAAQC,QAAQC,KAAKgB,qBAAqBC,SAD1BC,YACmDT,GAAS,SAAUN,GACvFA,EAAOC,SAAWd,OAAOe,kBAAkBc,OAC7CvB,QAAQwB,MAAM,wBAA0BjB,EAAOiB,MAAMN,SAErDlB,QAAQC,IAAI,uCAEhB,GACF,CACF,CA9CQwB,CADqBlB,EAAOmB,MAGhC,GAQF,CAAE,MAAOF,GACPxB,QAAQwB,MAAM,sBAAwBA,EAAMN,SAG5C,IAAMS,EAAe,CACnBb,KAAMpB,OAAOqB,aAAaC,4BAA4BC,aACtDC,QAAS,sBAAwBM,EAAMN,QACvCU,KAAM,YACNT,YAAY,GAGdzB,OAAOQ,QAAQC,QAAQC,KAAKgB,qBAAqBC,SADrB,oBACmDM,EACjF,CAAE,QACA5B,EAAM8B,WACR,CACF","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\nOffice.initialize = function (reason) { };\n\n/**\n * Handles the OnMessageRecipientsChanged event.\n * @param {*} event The Office event object\n */\nfunction CCInspector(event) {\n  try {\n    console.log(\"tagExternal_onMessageRecipientsChangedHandler method\"); // debugging\n\n    // Get recipients from the current email item\n    // Office.context.mailbox.item.to.getAsync(function (result) {\n    //   if (result.status === Office.AsyncResultStatus.Succeeded) {\n    //     const toRecipients = result.value;\n    //     checkRecipients(toRecipients, \"To\");\n    //   }\n    // });\n\n    Office.context.mailbox.item.cc.getAsync(function (result) {\n      if (result.status === Office.AsyncResultStatus.Succeeded) {\n        const ccRecipients = result.value;\n        checkRecipients(ccRecipients, \"CC\");\n      }\n    });\n\n    // Office.context.mailbox.item.bcc.getAsync(function (result) {\n    //   if (result.status === Office.AsyncResultStatus.Succeeded) {\n    //     const bccRecipients = result.value;\n    //     checkRecipients(bccRecipients, \"BCC\");\n    //   }\n    // });\n  } catch (error) {\n    console.error(\"An error occurred: \" + error.message);\n\n    // Display an error notification\n    const errorDetails = {\n      type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\n      message: \"An error occurred: \" + error.message,\n      icon: \"iconError\",\n      persistent: true\n    };\n    const errorNotificationId = \"errorNotification\";\n    Office.context.mailbox.item.notificationMessages.addAsync(errorNotificationId, errorDetails);\n  } finally {\n    event.completed();\n  }\n}\n\n// Function to check recipients and display notifications\nfunction checkRecipients(recipients, recipientType) {\n  if (recipients.length > 1) {\n    const details = {\n      type: Office.MailboxEnums.ItemNotificationMessageType.ErrorMessage,\n      message: \"ACHTUNG: Sie verwenden mehr als einen Adressaten im CC-Feld. Sind Sie sicher?\",\n     \n      persistent: false\n    };\n\n    const notificationId = recipientType + \"Warning\";\n    Office.context.mailbox.item.notificationMessages.addAsync(notificationId, details, function (result) {\n      if (result.status === Office.AsyncResultStatus.Failed) {\n        console.error(\"Notification failed: \" + result.error.message);\n      } else {\n        console.log(\"Notification displayed successfully.\");\n      }\n    });\n  }\n}\n\n// Associate the event handler\nOffice.actions.associate(\"CCInspector\", CCInspector);\n\n\n\n"],"names":["Office","initialize","reason","actions","associate","event","console","log","context","mailbox","item","cc","getAsync","result","status","AsyncResultStatus","Succeeded","recipients","length","details","type","MailboxEnums","ItemNotificationMessageType","ErrorMessage","message","persistent","notificationMessages","addAsync","recipientType","Failed","error","checkRecipients","value","errorDetails","icon","completed"],"sourceRoot":""}